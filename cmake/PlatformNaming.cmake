include(CheckSymbolExists)

macro(check_build_target symbol)
	check_symbol_exists(${symbol} "build.h" ${symbol})
endmacro()

macro(check_group_build_target symbol group)
	if(NOT ${group})
		check_build_target(${symbol})
		if(${symbol})
			set(${group} TRUE)
		endif()
	else()
		set(${symbol} FALSE)
	endif()
endmacro()

# So there is a problem:
# 1. Number of these symbols only grows, as we support more and more ports
# 2. CMake was written by morons and can't check these symbols in parallel
# 3. MSVC is very slow at everything (startup, parsing, generating error)

# Solution: group these symbols and set variable if one of them was found
# this way we can reorder to reorder them by most common configurations
# but we can't generate this list anymore! ... OR IS IT ???

# NOTE: Android must have priority over Linux to work correctly!

set(CMAKE_REQUIRED_INCLUDES "${PROJECT_SOURCE_DIR}/sources/")
check_build_target(BUILD_64BIT)
check_group_build_target(BUILD_WIN32 _GROUP_PLATFORM)
check_group_build_target(BUILD_ANDROID _GROUP_PLATFORM)
check_group_build_target(BUILD_LINUX _GROUP_PLATFORM)
check_group_build_target(BUILD_FREEBSD _GROUP_PLATFORM)
check_group_build_target(BUILD_APPLE _GROUP_PLATFORM)
check_group_build_target(BUILD_NETBSD _GROUP_PLATFORM)
check_group_build_target(BUILD_OPENBSD _GROUP_PLATFORM)
check_group_build_target(BUILD_EMSCRIPTEN _GROUP_PLATFORM)
check_group_build_target(BUILD_DOS4GW _GROUP_PLATFORM)
check_group_build_target(BUILD_HAIKU _GROUP_PLATFORM)
check_group_build_target(BUILD_SERENITY _GROUP_PLATFORM)
check_group_build_target(BUILD_IRIX _GROUP_PLATFORM)
check_group_build_target(BUILD_NSWITCH _GROUP_PLATFORM)
check_group_build_target(BUILD_PSVITA _GROUP_PLATFORM)
check_group_build_target(BUILD_LINUX_UNKNOWN _GROUP_PLATFORM)
check_group_build_target(BUILD_X86 _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_AMD64 _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_ARM _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_MIPS _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_PPC _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_JS _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_E2K _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_RISCV _GROUP_ARCHITECTURE)
check_group_build_target(BUILD_LITTLE_ENDIAN _GROUP_ENDIANNESS)
check_group_build_target(BUILD_BIG_ENDIAN _GROUP_ENDIANNESS)
if(BUILD_ARM)
	check_build_target(BUILD_ARM_HARDFP)
	check_build_target(BUILD_ARM_SOFTFP)
	check_build_target(BUILD_ARMv4)
	check_build_target(BUILD_ARMv5)
	check_build_target(BUILD_ARMv6)
	check_build_target(BUILD_ARMv7)
	check_build_target(BUILD_ARMv8)
endif()
if(BUILD_RISCV)
	check_build_target(BUILD_RISCV_DOUBLEFP)
	check_build_target(BUILD_RISCV_SINGLEFP)
	check_build_target(BUILD_RISCV_SOFTFP)
endif()
unset(CMAKE_REQUIRED_INCLUDES)

if(BUILD_ANDROID)
	set(BUILDOS "android")
elseif(BUILD_LINUX_UNKNOWN)
	set(BUILDOS "linuxunkabi")
elseif(BUILD_WIN32)
	set(BUILDOS "windows")
elseif(BUILD_LINUX)
	set(BUILDOS "linux")
elseif(BUILD_APPLE)
	set(BUILDOS "apple") 
elseif(BUILD_FREEBSD)
	set(BUILDOS "freebsd")
elseif(BUILD_NETBSD)
	set(BUILDOS "netbsd")
elseif(BUILD_OPENBSD)
	set(BUILDOS "openbsd")
elseif(BUILD_EMSCRIPTEN)
	set(BUILDOS "emscripten")
elseif(BUILD_DOS4GW)
	set(BUILDOS "DOS4GW")
elseif(BUILD_HAIKU)
	set(BUILDOS "haiku")
elseif(BUILD_SERENITY)
	set(BUILDOS "serenityos")
elseif(BUILD_NSWITCH)
	set(BUILDOS "nswitch")
elseif(BUILD_PSVITA)
	set(BUILDOS "psvita")
elseif(BUILD_IRIX)
	set(BUILDOS "irix")
else()
	message(SEND_ERROR "Place your operating system name here! If this is a mistake, try to fix conditions above and report a bug")
endif()

if(BUILD_AMD64)
	set(BUILDARCH "amd64")
elseif(BUILD_X86)
	set(BUILDARCH "i386")
elseif(BUILD_ARM AND BUILD_64BIT)
	set(BUILDARCH "arm64")
elseif(BUILD_ARM)
	set(BUILDARCH "armv")
	if(BUILD_ARMv8)
		set(BUILDARCH "${BUILDARCH}8_32")
	elseif(BUILD_ARMv7)
		set(BUILDARCH "${BUILDARCH}7")
	elseif(BUILD_ARMv6)
		set(BUILDARCH "${BUILDARCH}6")
	elseif(BUILD_ARMv5)
		set(BUILDARCH "${BUILDARCH}5")
	elseif(BUILD_ARMv4)
		set(BUILDARCH "${BUILDARCH}4")
	else()
		message(SEND_ERROR "Unknown ARM")
	endif()

	if(BUILD_ARM_HARDFP)
		set(BUILDARCH "${BUILDARCH}hf")
	else()
		set(BUILDARCH "${BUILDARCH}l")
	endif()
elseif(BUILD_MIPS)
	set(BUILDARCH "mips")
	if(BUILD_64BIT)
		set(BUILDARCH "${BUILDARCH}64")
	endif()

	if(BUILD_LITTLE_ENDIAN)
		set(BUILDARCH "${BUILDARCH}el")
	endif()
elseif(BUILD_RISCV)
	set(BUILDARCH "riscv")
	if(BUILD_64BIT)
		set(BUILDARCH "${BUILDARCH}64")
	else()
		set(BUILDARCH "${BUILDARCH}32")
	endif()

	if(BUILD_RISCV_DOUBLEFP)
		set(BUILDARCH "${BUILDARCH}d")
	elseif(BUILD_RISCV_SINGLEFP)
		set(BUILDARCH "${BUILDARCH}f")
	endif()
elseif(BUILD_JS)
	set(BUILDARCH "javascript")
elseif(BUILD_E2K)
	set(BUILDARCH "e2k")
elseif(BUILD_PPC)
	set(BUILDARCH "ppc")
	if(BUILD_64BIT)
		set(BUILDARCH "${BUILDARCH}64")
	endif()

	if(BUILD_LITTLE_ENDIAN)
		set(BUILDARCH "${BUILDARCH}el")
	endif()
else()
	message(SEND_ERROR "Place your architecture name here! If this is a mistake, try to fix conditions above and report a bug")
endif()

message(STATUS "Target platform: " ${BUILDOS})
message(STATUS "Target architecture: " ${BUILDARCH})
